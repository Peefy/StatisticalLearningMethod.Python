
class Chapter2:
    """
    第2章 感知机
    """
    def __init__(self):
        """
        第2章 感知机
        """
        pass

    def note(self):
        """
        chapter2 note
        """
        print('第2章 感知机')
        print('感知机(perception)是二类分类的线性分类模型,其输入为实例的特征向量,输出为实例的类别,取+1和-1二值')
        print('感知机对应于输入空间(特征空间)中将实例划分为正负两类的分离超平面,属于判别模型.感知机学习旨在求出将训练数据进行线性划分的分离超平面')
        print('为此,导入基于误分类的损失函数,利用梯度下降法对损失函数进行极小化,求得感知机模型.')
        print('感知机学习算法具有简单而易于实现的优点,分为原始形式和对偶形式.感知机预测是用学习得到的感知机模型对新的输入实例进行分类.')
        print('感知机1957年由Rosenblatt提出,是神经网络与支持向量机的基础.')
        print('本章介绍感知机模型、学习策略(损失函数)、学习算法(原始形式，对偶形式),并证明算法的收敛性')
        print('2.1 感知机模型')
        print('定义2.1 (感知机) 假设输入空间(特征空间)是X∈R^n,输出空间是Y={+1,-1}.',
            '输入x∈X表示实例的特征向量,对应于输入空间(特征空间)的点；输出y∈Y表示实例的类别.',
            '由输入空间到输出空间的如下函数:f(x)=sign(w·x+b)称为感知机',
            '其中,w和b为感知机模型参数,w∈R^n叫做权值(weight)或权值向量,b∈R叫作偏置,w·x表示w和x的内积.sign是符号函数')
        print('sign(x)=1,x>=0; sign(x)=-1,x<0')
        print('感知机是一种线性分类模型,属于判别模型.感知机模型的假设空间是定义在特征空间中的所有线性分类模型或者线性分类器,',
            '即函数集合{f|f(x)=w·x+b}')
        print('感知机有如下几何解释:线性方程w·x+b=0对应于特征空间R^n中的一个超平面S,其中w是超平面的法向量,b是超平面的截距.')
        print('这个超平面将特征空间划分为两个部分.位于两部分的点(特征向量)分别被正、负两类.因此,超平面S称为分离超平面')
        print('感知机学习,由训练数据集(实例的特征向量及类别).其中,xi∈X=R^n,yi∈Y={+1,-1},i=1,2,...,N,求得感知机模型,',
            '即求得模型参数w,b.感知机预测,通过学习得到的感知机模型,对于信的输入实例给出其对应的输出类别')
        print('2.2 感知机学习策略')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')
        print('')

chapter2 = Chapter2()

def main():
    chapter2.note()

if __name__ == '__main__':
    main()